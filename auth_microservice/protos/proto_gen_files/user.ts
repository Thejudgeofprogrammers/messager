// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.12.4
// source: user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "user";

export interface CreateNewUserRequest {
  phoneNumber: string;
  email: string;
  passwordHash: string;
  username: string;
}

export interface CreateNewUserResponse {
  message: string;
  status: number;
}

export interface FindUserByIdRequest {
  userId: number;
}

export interface FindUserByIdResponse {
  userId: number;
  phoneNumber: string;
  email: string;
  tag: string;
  passwordHash: string;
  username: string;
}

export interface FindUserProfileRequest {
  userId: number;
}

export interface FindUserProfileResponse {
  userId: number;
  description: string;
  createdAt: string;
  lastLogin: string;
}

export interface FindUserAvatarsRequest {
  userId: number;
}

export interface Avatar {
  userId: number;
  avatarId: string;
  avatarUrl: string;
  isActive: boolean;
}

export interface FindUserAvatarsResponse {
  avatars: Avatar[];
}

export interface FindUserByUsernameRequest {
  username: string;
}

export interface FindUserByUsernameResponse {
  users: UserArray[];
}

export interface UserArray {
  userId: number;
  username: string;
}

export interface FindUserByTagRequest {
  tag: string;
}

export interface FindUserByTagResponse {
  userId: number;
  phoneNumber: string;
  email: string;
  tag: string;
  passwordHash: string;
  username: string;
}

export interface FindUserByEmailRequest {
  email: string;
}

export interface FindUserByEmailResponse {
  userId: number;
  phoneNumber: string;
  email: string;
  tag: string;
  passwordHash: string;
  username: string;
}

export interface FindUserByPhoneNumberRequest {
  phoneNumber: string;
}

export interface FindUserByPhoneNumberResponse {
  userId: number;
  phoneNumber: string;
  email: string;
  tag: string;
  passwordHash: string;
  username: string;
}

export interface UpdateUserProfileRequest {
  userId: number;
  description: string;
}

export interface UpdateUserProfileResponse {
  /** "Successful update description" */
  message: string;
}

export interface UpdateUserPasswordRequest {
  userId: number;
  password: string;
}

export interface UpdateUserPasswordResponse {
  /** "Successful update user password" */
  message: string;
}

export interface AddAvatarToUserRequest {
  userId: number;
}

export interface AddAvatarToUserResponse {
  avatars: Avatar[];
}

export interface DeleteAvatarUserRequest {
  userId: number;
  avatarId: string;
}

export interface DeleteAvatarUserResponse {
  /** "Successful delete avatar" */
  message: string;
}

function createBaseCreateNewUserRequest(): CreateNewUserRequest {
  return { phoneNumber: "", email: "", passwordHash: "", username: "" };
}

export const CreateNewUserRequest: MessageFns<CreateNewUserRequest> = {
  encode(message: CreateNewUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phoneNumber !== "") {
      writer.uint32(18).string(message.phoneNumber);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.passwordHash !== "") {
      writer.uint32(42).string(message.passwordHash);
    }
    if (message.username !== "") {
      writer.uint32(50).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateNewUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateNewUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.passwordHash = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateNewUserRequest {
    return {
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      passwordHash: isSet(object.passwordHash) ? globalThis.String(object.passwordHash) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
    };
  },

  toJSON(message: CreateNewUserRequest): unknown {
    const obj: any = {};
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.passwordHash !== "") {
      obj.passwordHash = message.passwordHash;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateNewUserRequest>, I>>(base?: I): CreateNewUserRequest {
    return CreateNewUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateNewUserRequest>, I>>(object: I): CreateNewUserRequest {
    const message = createBaseCreateNewUserRequest();
    message.phoneNumber = object.phoneNumber ?? "";
    message.email = object.email ?? "";
    message.passwordHash = object.passwordHash ?? "";
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseCreateNewUserResponse(): CreateNewUserResponse {
  return { message: "", status: 0 };
}

export const CreateNewUserResponse: MessageFns<CreateNewUserResponse> = {
  encode(message: CreateNewUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateNewUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateNewUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateNewUserResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
    };
  },

  toJSON(message: CreateNewUserResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateNewUserResponse>, I>>(base?: I): CreateNewUserResponse {
    return CreateNewUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateNewUserResponse>, I>>(object: I): CreateNewUserResponse {
    const message = createBaseCreateNewUserResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseFindUserByIdRequest(): FindUserByIdRequest {
  return { userId: 0 };
}

export const FindUserByIdRequest: MessageFns<FindUserByIdRequest> = {
  encode(message: FindUserByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserByIdRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 };
  },

  toJSON(message: FindUserByIdRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserByIdRequest>, I>>(base?: I): FindUserByIdRequest {
    return FindUserByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserByIdRequest>, I>>(object: I): FindUserByIdRequest {
    const message = createBaseFindUserByIdRequest();
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseFindUserByIdResponse(): FindUserByIdResponse {
  return { userId: 0, phoneNumber: "", email: "", tag: "", passwordHash: "", username: "" };
}

export const FindUserByIdResponse: MessageFns<FindUserByIdResponse> = {
  encode(message: FindUserByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.phoneNumber !== "") {
      writer.uint32(18).string(message.phoneNumber);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.tag !== "") {
      writer.uint32(34).string(message.tag);
    }
    if (message.passwordHash !== "") {
      writer.uint32(42).string(message.passwordHash);
    }
    if (message.username !== "") {
      writer.uint32(50).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tag = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.passwordHash = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserByIdResponse {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
      passwordHash: isSet(object.passwordHash) ? globalThis.String(object.passwordHash) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
    };
  },

  toJSON(message: FindUserByIdResponse): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    if (message.passwordHash !== "") {
      obj.passwordHash = message.passwordHash;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserByIdResponse>, I>>(base?: I): FindUserByIdResponse {
    return FindUserByIdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserByIdResponse>, I>>(object: I): FindUserByIdResponse {
    const message = createBaseFindUserByIdResponse();
    message.userId = object.userId ?? 0;
    message.phoneNumber = object.phoneNumber ?? "";
    message.email = object.email ?? "";
    message.tag = object.tag ?? "";
    message.passwordHash = object.passwordHash ?? "";
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseFindUserProfileRequest(): FindUserProfileRequest {
  return { userId: 0 };
}

export const FindUserProfileRequest: MessageFns<FindUserProfileRequest> = {
  encode(message: FindUserProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserProfileRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 };
  },

  toJSON(message: FindUserProfileRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserProfileRequest>, I>>(base?: I): FindUserProfileRequest {
    return FindUserProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserProfileRequest>, I>>(object: I): FindUserProfileRequest {
    const message = createBaseFindUserProfileRequest();
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseFindUserProfileResponse(): FindUserProfileResponse {
  return { userId: 0, description: "", createdAt: "", lastLogin: "" };
}

export const FindUserProfileResponse: MessageFns<FindUserProfileResponse> = {
  encode(message: FindUserProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.createdAt !== "") {
      writer.uint32(26).string(message.createdAt);
    }
    if (message.lastLogin !== "") {
      writer.uint32(34).string(message.lastLogin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.lastLogin = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserProfileResponse {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      lastLogin: isSet(object.lastLogin) ? globalThis.String(object.lastLogin) : "",
    };
  },

  toJSON(message: FindUserProfileResponse): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.lastLogin !== "") {
      obj.lastLogin = message.lastLogin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserProfileResponse>, I>>(base?: I): FindUserProfileResponse {
    return FindUserProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserProfileResponse>, I>>(object: I): FindUserProfileResponse {
    const message = createBaseFindUserProfileResponse();
    message.userId = object.userId ?? 0;
    message.description = object.description ?? "";
    message.createdAt = object.createdAt ?? "";
    message.lastLogin = object.lastLogin ?? "";
    return message;
  },
};

function createBaseFindUserAvatarsRequest(): FindUserAvatarsRequest {
  return { userId: 0 };
}

export const FindUserAvatarsRequest: MessageFns<FindUserAvatarsRequest> = {
  encode(message: FindUserAvatarsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserAvatarsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserAvatarsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserAvatarsRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 };
  },

  toJSON(message: FindUserAvatarsRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserAvatarsRequest>, I>>(base?: I): FindUserAvatarsRequest {
    return FindUserAvatarsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserAvatarsRequest>, I>>(object: I): FindUserAvatarsRequest {
    const message = createBaseFindUserAvatarsRequest();
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseAvatar(): Avatar {
  return { userId: 0, avatarId: "", avatarUrl: "", isActive: false };
}

export const Avatar: MessageFns<Avatar> = {
  encode(message: Avatar, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.avatarId !== "") {
      writer.uint32(18).string(message.avatarId);
    }
    if (message.avatarUrl !== "") {
      writer.uint32(26).string(message.avatarUrl);
    }
    if (message.isActive !== false) {
      writer.uint32(32).bool(message.isActive);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Avatar {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAvatar();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.avatarId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.avatarUrl = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.isActive = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Avatar {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      avatarId: isSet(object.avatarId) ? globalThis.String(object.avatarId) : "",
      avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : "",
      isActive: isSet(object.isActive) ? globalThis.Boolean(object.isActive) : false,
    };
  },

  toJSON(message: Avatar): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.avatarId !== "") {
      obj.avatarId = message.avatarId;
    }
    if (message.avatarUrl !== "") {
      obj.avatarUrl = message.avatarUrl;
    }
    if (message.isActive !== false) {
      obj.isActive = message.isActive;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Avatar>, I>>(base?: I): Avatar {
    return Avatar.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Avatar>, I>>(object: I): Avatar {
    const message = createBaseAvatar();
    message.userId = object.userId ?? 0;
    message.avatarId = object.avatarId ?? "";
    message.avatarUrl = object.avatarUrl ?? "";
    message.isActive = object.isActive ?? false;
    return message;
  },
};

function createBaseFindUserAvatarsResponse(): FindUserAvatarsResponse {
  return { avatars: [] };
}

export const FindUserAvatarsResponse: MessageFns<FindUserAvatarsResponse> = {
  encode(message: FindUserAvatarsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.avatars) {
      Avatar.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserAvatarsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserAvatarsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.avatars.push(Avatar.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserAvatarsResponse {
    return {
      avatars: globalThis.Array.isArray(object?.avatars) ? object.avatars.map((e: any) => Avatar.fromJSON(e)) : [],
    };
  },

  toJSON(message: FindUserAvatarsResponse): unknown {
    const obj: any = {};
    if (message.avatars?.length) {
      obj.avatars = message.avatars.map((e) => Avatar.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserAvatarsResponse>, I>>(base?: I): FindUserAvatarsResponse {
    return FindUserAvatarsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserAvatarsResponse>, I>>(object: I): FindUserAvatarsResponse {
    const message = createBaseFindUserAvatarsResponse();
    message.avatars = object.avatars?.map((e) => Avatar.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFindUserByUsernameRequest(): FindUserByUsernameRequest {
  return { username: "" };
}

export const FindUserByUsernameRequest: MessageFns<FindUserByUsernameRequest> = {
  encode(message: FindUserByUsernameRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.username !== "") {
      writer.uint32(10).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserByUsernameRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserByUsernameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserByUsernameRequest {
    return { username: isSet(object.username) ? globalThis.String(object.username) : "" };
  },

  toJSON(message: FindUserByUsernameRequest): unknown {
    const obj: any = {};
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserByUsernameRequest>, I>>(base?: I): FindUserByUsernameRequest {
    return FindUserByUsernameRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserByUsernameRequest>, I>>(object: I): FindUserByUsernameRequest {
    const message = createBaseFindUserByUsernameRequest();
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseFindUserByUsernameResponse(): FindUserByUsernameResponse {
  return { users: [] };
}

export const FindUserByUsernameResponse: MessageFns<FindUserByUsernameResponse> = {
  encode(message: FindUserByUsernameResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.users) {
      UserArray.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserByUsernameResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserByUsernameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.users.push(UserArray.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserByUsernameResponse {
    return {
      users: globalThis.Array.isArray(object?.users) ? object.users.map((e: any) => UserArray.fromJSON(e)) : [],
    };
  },

  toJSON(message: FindUserByUsernameResponse): unknown {
    const obj: any = {};
    if (message.users?.length) {
      obj.users = message.users.map((e) => UserArray.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserByUsernameResponse>, I>>(base?: I): FindUserByUsernameResponse {
    return FindUserByUsernameResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserByUsernameResponse>, I>>(object: I): FindUserByUsernameResponse {
    const message = createBaseFindUserByUsernameResponse();
    message.users = object.users?.map((e) => UserArray.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUserArray(): UserArray {
  return { userId: 0, username: "" };
}

export const UserArray: MessageFns<UserArray> = {
  encode(message: UserArray, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserArray {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserArray();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserArray {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      username: isSet(object.username) ? globalThis.String(object.username) : "",
    };
  },

  toJSON(message: UserArray): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserArray>, I>>(base?: I): UserArray {
    return UserArray.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserArray>, I>>(object: I): UserArray {
    const message = createBaseUserArray();
    message.userId = object.userId ?? 0;
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseFindUserByTagRequest(): FindUserByTagRequest {
  return { tag: "" };
}

export const FindUserByTagRequest: MessageFns<FindUserByTagRequest> = {
  encode(message: FindUserByTagRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tag !== "") {
      writer.uint32(10).string(message.tag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserByTagRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserByTagRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tag = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserByTagRequest {
    return { tag: isSet(object.tag) ? globalThis.String(object.tag) : "" };
  },

  toJSON(message: FindUserByTagRequest): unknown {
    const obj: any = {};
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserByTagRequest>, I>>(base?: I): FindUserByTagRequest {
    return FindUserByTagRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserByTagRequest>, I>>(object: I): FindUserByTagRequest {
    const message = createBaseFindUserByTagRequest();
    message.tag = object.tag ?? "";
    return message;
  },
};

function createBaseFindUserByTagResponse(): FindUserByTagResponse {
  return { userId: 0, phoneNumber: "", email: "", tag: "", passwordHash: "", username: "" };
}

export const FindUserByTagResponse: MessageFns<FindUserByTagResponse> = {
  encode(message: FindUserByTagResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.phoneNumber !== "") {
      writer.uint32(18).string(message.phoneNumber);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.tag !== "") {
      writer.uint32(34).string(message.tag);
    }
    if (message.passwordHash !== "") {
      writer.uint32(42).string(message.passwordHash);
    }
    if (message.username !== "") {
      writer.uint32(50).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserByTagResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserByTagResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tag = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.passwordHash = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserByTagResponse {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
      passwordHash: isSet(object.passwordHash) ? globalThis.String(object.passwordHash) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
    };
  },

  toJSON(message: FindUserByTagResponse): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    if (message.passwordHash !== "") {
      obj.passwordHash = message.passwordHash;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserByTagResponse>, I>>(base?: I): FindUserByTagResponse {
    return FindUserByTagResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserByTagResponse>, I>>(object: I): FindUserByTagResponse {
    const message = createBaseFindUserByTagResponse();
    message.userId = object.userId ?? 0;
    message.phoneNumber = object.phoneNumber ?? "";
    message.email = object.email ?? "";
    message.tag = object.tag ?? "";
    message.passwordHash = object.passwordHash ?? "";
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseFindUserByEmailRequest(): FindUserByEmailRequest {
  return { email: "" };
}

export const FindUserByEmailRequest: MessageFns<FindUserByEmailRequest> = {
  encode(message: FindUserByEmailRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserByEmailRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserByEmailRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserByEmailRequest {
    return { email: isSet(object.email) ? globalThis.String(object.email) : "" };
  },

  toJSON(message: FindUserByEmailRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserByEmailRequest>, I>>(base?: I): FindUserByEmailRequest {
    return FindUserByEmailRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserByEmailRequest>, I>>(object: I): FindUserByEmailRequest {
    const message = createBaseFindUserByEmailRequest();
    message.email = object.email ?? "";
    return message;
  },
};

function createBaseFindUserByEmailResponse(): FindUserByEmailResponse {
  return { userId: 0, phoneNumber: "", email: "", tag: "", passwordHash: "", username: "" };
}

export const FindUserByEmailResponse: MessageFns<FindUserByEmailResponse> = {
  encode(message: FindUserByEmailResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.phoneNumber !== "") {
      writer.uint32(18).string(message.phoneNumber);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.tag !== "") {
      writer.uint32(34).string(message.tag);
    }
    if (message.passwordHash !== "") {
      writer.uint32(42).string(message.passwordHash);
    }
    if (message.username !== "") {
      writer.uint32(50).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserByEmailResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserByEmailResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tag = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.passwordHash = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserByEmailResponse {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
      passwordHash: isSet(object.passwordHash) ? globalThis.String(object.passwordHash) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
    };
  },

  toJSON(message: FindUserByEmailResponse): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    if (message.passwordHash !== "") {
      obj.passwordHash = message.passwordHash;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserByEmailResponse>, I>>(base?: I): FindUserByEmailResponse {
    return FindUserByEmailResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserByEmailResponse>, I>>(object: I): FindUserByEmailResponse {
    const message = createBaseFindUserByEmailResponse();
    message.userId = object.userId ?? 0;
    message.phoneNumber = object.phoneNumber ?? "";
    message.email = object.email ?? "";
    message.tag = object.tag ?? "";
    message.passwordHash = object.passwordHash ?? "";
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseFindUserByPhoneNumberRequest(): FindUserByPhoneNumberRequest {
  return { phoneNumber: "" };
}

export const FindUserByPhoneNumberRequest: MessageFns<FindUserByPhoneNumberRequest> = {
  encode(message: FindUserByPhoneNumberRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.phoneNumber !== "") {
      writer.uint32(10).string(message.phoneNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserByPhoneNumberRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserByPhoneNumberRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserByPhoneNumberRequest {
    return { phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "" };
  },

  toJSON(message: FindUserByPhoneNumberRequest): unknown {
    const obj: any = {};
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserByPhoneNumberRequest>, I>>(base?: I): FindUserByPhoneNumberRequest {
    return FindUserByPhoneNumberRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserByPhoneNumberRequest>, I>>(object: I): FindUserByPhoneNumberRequest {
    const message = createBaseFindUserByPhoneNumberRequest();
    message.phoneNumber = object.phoneNumber ?? "";
    return message;
  },
};

function createBaseFindUserByPhoneNumberResponse(): FindUserByPhoneNumberResponse {
  return { userId: 0, phoneNumber: "", email: "", tag: "", passwordHash: "", username: "" };
}

export const FindUserByPhoneNumberResponse: MessageFns<FindUserByPhoneNumberResponse> = {
  encode(message: FindUserByPhoneNumberResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.phoneNumber !== "") {
      writer.uint32(18).string(message.phoneNumber);
    }
    if (message.email !== "") {
      writer.uint32(26).string(message.email);
    }
    if (message.tag !== "") {
      writer.uint32(34).string(message.tag);
    }
    if (message.passwordHash !== "") {
      writer.uint32(42).string(message.passwordHash);
    }
    if (message.username !== "") {
      writer.uint32(50).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserByPhoneNumberResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserByPhoneNumberResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.phoneNumber = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tag = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.passwordHash = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserByPhoneNumberResponse {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      phoneNumber: isSet(object.phoneNumber) ? globalThis.String(object.phoneNumber) : "",
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      tag: isSet(object.tag) ? globalThis.String(object.tag) : "",
      passwordHash: isSet(object.passwordHash) ? globalThis.String(object.passwordHash) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
    };
  },

  toJSON(message: FindUserByPhoneNumberResponse): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.phoneNumber !== "") {
      obj.phoneNumber = message.phoneNumber;
    }
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.tag !== "") {
      obj.tag = message.tag;
    }
    if (message.passwordHash !== "") {
      obj.passwordHash = message.passwordHash;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserByPhoneNumberResponse>, I>>(base?: I): FindUserByPhoneNumberResponse {
    return FindUserByPhoneNumberResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserByPhoneNumberResponse>, I>>(
    object: I,
  ): FindUserByPhoneNumberResponse {
    const message = createBaseFindUserByPhoneNumberResponse();
    message.userId = object.userId ?? 0;
    message.phoneNumber = object.phoneNumber ?? "";
    message.email = object.email ?? "";
    message.tag = object.tag ?? "";
    message.passwordHash = object.passwordHash ?? "";
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseUpdateUserProfileRequest(): UpdateUserProfileRequest {
  return { userId: 0, description: "" };
}

export const UpdateUserProfileRequest: MessageFns<UpdateUserProfileRequest> = {
  encode(message: UpdateUserProfileRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserProfileRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserProfileRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserProfileRequest {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: UpdateUserProfileRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserProfileRequest>, I>>(base?: I): UpdateUserProfileRequest {
    return UpdateUserProfileRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserProfileRequest>, I>>(object: I): UpdateUserProfileRequest {
    const message = createBaseUpdateUserProfileRequest();
    message.userId = object.userId ?? 0;
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseUpdateUserProfileResponse(): UpdateUserProfileResponse {
  return { message: "" };
}

export const UpdateUserProfileResponse: MessageFns<UpdateUserProfileResponse> = {
  encode(message: UpdateUserProfileResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserProfileResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserProfileResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserProfileResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: UpdateUserProfileResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserProfileResponse>, I>>(base?: I): UpdateUserProfileResponse {
    return UpdateUserProfileResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserProfileResponse>, I>>(object: I): UpdateUserProfileResponse {
    const message = createBaseUpdateUserProfileResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseUpdateUserPasswordRequest(): UpdateUserPasswordRequest {
  return { userId: 0, password: "" };
}

export const UpdateUserPasswordRequest: MessageFns<UpdateUserPasswordRequest> = {
  encode(message: UpdateUserPasswordRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserPasswordRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserPasswordRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserPasswordRequest {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: UpdateUserPasswordRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserPasswordRequest>, I>>(base?: I): UpdateUserPasswordRequest {
    return UpdateUserPasswordRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserPasswordRequest>, I>>(object: I): UpdateUserPasswordRequest {
    const message = createBaseUpdateUserPasswordRequest();
    message.userId = object.userId ?? 0;
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseUpdateUserPasswordResponse(): UpdateUserPasswordResponse {
  return { message: "" };
}

export const UpdateUserPasswordResponse: MessageFns<UpdateUserPasswordResponse> = {
  encode(message: UpdateUserPasswordResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateUserPasswordResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserPasswordResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserPasswordResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: UpdateUserPasswordResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserPasswordResponse>, I>>(base?: I): UpdateUserPasswordResponse {
    return UpdateUserPasswordResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserPasswordResponse>, I>>(object: I): UpdateUserPasswordResponse {
    const message = createBaseUpdateUserPasswordResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseAddAvatarToUserRequest(): AddAvatarToUserRequest {
  return { userId: 0 };
}

export const AddAvatarToUserRequest: MessageFns<AddAvatarToUserRequest> = {
  encode(message: AddAvatarToUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddAvatarToUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAvatarToUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAvatarToUserRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 };
  },

  toJSON(message: AddAvatarToUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddAvatarToUserRequest>, I>>(base?: I): AddAvatarToUserRequest {
    return AddAvatarToUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddAvatarToUserRequest>, I>>(object: I): AddAvatarToUserRequest {
    const message = createBaseAddAvatarToUserRequest();
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseAddAvatarToUserResponse(): AddAvatarToUserResponse {
  return { avatars: [] };
}

export const AddAvatarToUserResponse: MessageFns<AddAvatarToUserResponse> = {
  encode(message: AddAvatarToUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.avatars) {
      Avatar.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AddAvatarToUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAddAvatarToUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.avatars.push(Avatar.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AddAvatarToUserResponse {
    return {
      avatars: globalThis.Array.isArray(object?.avatars) ? object.avatars.map((e: any) => Avatar.fromJSON(e)) : [],
    };
  },

  toJSON(message: AddAvatarToUserResponse): unknown {
    const obj: any = {};
    if (message.avatars?.length) {
      obj.avatars = message.avatars.map((e) => Avatar.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AddAvatarToUserResponse>, I>>(base?: I): AddAvatarToUserResponse {
    return AddAvatarToUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AddAvatarToUserResponse>, I>>(object: I): AddAvatarToUserResponse {
    const message = createBaseAddAvatarToUserResponse();
    message.avatars = object.avatars?.map((e) => Avatar.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeleteAvatarUserRequest(): DeleteAvatarUserRequest {
  return { userId: 0, avatarId: "" };
}

export const DeleteAvatarUserRequest: MessageFns<DeleteAvatarUserRequest> = {
  encode(message: DeleteAvatarUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.avatarId !== "") {
      writer.uint32(18).string(message.avatarId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAvatarUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAvatarUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.avatarId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAvatarUserRequest {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      avatarId: isSet(object.avatarId) ? globalThis.String(object.avatarId) : "",
    };
  },

  toJSON(message: DeleteAvatarUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.avatarId !== "") {
      obj.avatarId = message.avatarId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteAvatarUserRequest>, I>>(base?: I): DeleteAvatarUserRequest {
    return DeleteAvatarUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteAvatarUserRequest>, I>>(object: I): DeleteAvatarUserRequest {
    const message = createBaseDeleteAvatarUserRequest();
    message.userId = object.userId ?? 0;
    message.avatarId = object.avatarId ?? "";
    return message;
  },
};

function createBaseDeleteAvatarUserResponse(): DeleteAvatarUserResponse {
  return { message: "" };
}

export const DeleteAvatarUserResponse: MessageFns<DeleteAvatarUserResponse> = {
  encode(message: DeleteAvatarUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAvatarUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAvatarUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAvatarUserResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: DeleteAvatarUserResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteAvatarUserResponse>, I>>(base?: I): DeleteAvatarUserResponse {
    return DeleteAvatarUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteAvatarUserResponse>, I>>(object: I): DeleteAvatarUserResponse {
    const message = createBaseDeleteAvatarUserResponse();
    message.message = object.message ?? "";
    return message;
  },
};

export interface UserService {
  CreateNewUser(request: CreateNewUserRequest): Promise<CreateNewUserResponse>;
  FindUserById(request: FindUserByIdRequest): Promise<FindUserByIdResponse>;
  FindUserProfile(request: FindUserProfileRequest): Promise<FindUserProfileResponse>;
  FindUserAvatars(request: FindUserAvatarsRequest): Promise<FindUserAvatarsResponse>;
  FindUserByUsername(request: FindUserByUsernameRequest): Promise<FindUserByUsernameResponse>;
  FindUserByTag(request: FindUserByTagRequest): Promise<FindUserByTagResponse>;
  FindUserByEmail(request: FindUserByEmailRequest): Promise<FindUserByEmailResponse>;
  FindUserByPhoneNumber(request: FindUserByPhoneNumberRequest): Promise<FindUserByPhoneNumberResponse>;
  UpdateUserProfile(request: UpdateUserProfileRequest): Promise<UpdateUserProfileResponse>;
  UpdateUserPassword(request: UpdateUserPasswordRequest): Promise<UpdateUserPasswordResponse>;
  AddAvatarToUser(request: AddAvatarToUserRequest): Promise<AddAvatarToUserResponse>;
  DeleteAvatarUser(request: DeleteAvatarUserRequest): Promise<DeleteAvatarUserResponse>;
}

export const UserServiceServiceName = "user.UserService";
export class UserServiceClientImpl implements UserService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || UserServiceServiceName;
    this.rpc = rpc;
    this.CreateNewUser = this.CreateNewUser.bind(this);
    this.FindUserById = this.FindUserById.bind(this);
    this.FindUserProfile = this.FindUserProfile.bind(this);
    this.FindUserAvatars = this.FindUserAvatars.bind(this);
    this.FindUserByUsername = this.FindUserByUsername.bind(this);
    this.FindUserByTag = this.FindUserByTag.bind(this);
    this.FindUserByEmail = this.FindUserByEmail.bind(this);
    this.FindUserByPhoneNumber = this.FindUserByPhoneNumber.bind(this);
    this.UpdateUserProfile = this.UpdateUserProfile.bind(this);
    this.UpdateUserPassword = this.UpdateUserPassword.bind(this);
    this.AddAvatarToUser = this.AddAvatarToUser.bind(this);
    this.DeleteAvatarUser = this.DeleteAvatarUser.bind(this);
  }
  CreateNewUser(request: CreateNewUserRequest): Promise<CreateNewUserResponse> {
    const data = CreateNewUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateNewUser", data);
    return promise.then((data) => CreateNewUserResponse.decode(new BinaryReader(data)));
  }

  FindUserById(request: FindUserByIdRequest): Promise<FindUserByIdResponse> {
    const data = FindUserByIdRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FindUserById", data);
    return promise.then((data) => FindUserByIdResponse.decode(new BinaryReader(data)));
  }

  FindUserProfile(request: FindUserProfileRequest): Promise<FindUserProfileResponse> {
    const data = FindUserProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FindUserProfile", data);
    return promise.then((data) => FindUserProfileResponse.decode(new BinaryReader(data)));
  }

  FindUserAvatars(request: FindUserAvatarsRequest): Promise<FindUserAvatarsResponse> {
    const data = FindUserAvatarsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FindUserAvatars", data);
    return promise.then((data) => FindUserAvatarsResponse.decode(new BinaryReader(data)));
  }

  FindUserByUsername(request: FindUserByUsernameRequest): Promise<FindUserByUsernameResponse> {
    const data = FindUserByUsernameRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FindUserByUsername", data);
    return promise.then((data) => FindUserByUsernameResponse.decode(new BinaryReader(data)));
  }

  FindUserByTag(request: FindUserByTagRequest): Promise<FindUserByTagResponse> {
    const data = FindUserByTagRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FindUserByTag", data);
    return promise.then((data) => FindUserByTagResponse.decode(new BinaryReader(data)));
  }

  FindUserByEmail(request: FindUserByEmailRequest): Promise<FindUserByEmailResponse> {
    const data = FindUserByEmailRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FindUserByEmail", data);
    return promise.then((data) => FindUserByEmailResponse.decode(new BinaryReader(data)));
  }

  FindUserByPhoneNumber(request: FindUserByPhoneNumberRequest): Promise<FindUserByPhoneNumberResponse> {
    const data = FindUserByPhoneNumberRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FindUserByPhoneNumber", data);
    return promise.then((data) => FindUserByPhoneNumberResponse.decode(new BinaryReader(data)));
  }

  UpdateUserProfile(request: UpdateUserProfileRequest): Promise<UpdateUserProfileResponse> {
    const data = UpdateUserProfileRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateUserProfile", data);
    return promise.then((data) => UpdateUserProfileResponse.decode(new BinaryReader(data)));
  }

  UpdateUserPassword(request: UpdateUserPasswordRequest): Promise<UpdateUserPasswordResponse> {
    const data = UpdateUserPasswordRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateUserPassword", data);
    return promise.then((data) => UpdateUserPasswordResponse.decode(new BinaryReader(data)));
  }

  AddAvatarToUser(request: AddAvatarToUserRequest): Promise<AddAvatarToUserResponse> {
    const data = AddAvatarToUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddAvatarToUser", data);
    return promise.then((data) => AddAvatarToUserResponse.decode(new BinaryReader(data)));
  }

  DeleteAvatarUser(request: DeleteAvatarUserRequest): Promise<DeleteAvatarUserResponse> {
    const data = DeleteAvatarUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteAvatarUser", data);
    return promise.then((data) => DeleteAvatarUserResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
