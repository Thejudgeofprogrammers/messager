// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.12.4
// source: content.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "content";

export interface UploadAvatarUserRequest {
  userId: number;
  avatarUrl: string;
}

export interface FindUserAvatarRequest {
  userId: number;
  avatarId: number;
}

export interface FindUserAvatarArrayRequest {
  userId: number;
}

export interface DeleteAvatarUserRequest {
  userId: number;
  avatarId: number;
}

export interface DeleteAvatarUserResponse {
  message: string;
  status: number;
}

export interface FindUserAvatarResponse {
  message: string;
  status: number;
  data: AvatarData | undefined;
}

export interface FindUserAvatarArrayResponse {
  message: string;
  status: number;
  data: AvatarData[];
}

export interface UploadAvatarUserResponse {
  message: string;
  status: number;
}

export interface AvatarData {
  avatarId: number;
  avatarUrl: string;
}

function createBaseUploadAvatarUserRequest(): UploadAvatarUserRequest {
  return { userId: 0, avatarUrl: "" };
}

export const UploadAvatarUserRequest: MessageFns<UploadAvatarUserRequest> = {
  encode(message: UploadAvatarUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.avatarUrl !== "") {
      writer.uint32(18).string(message.avatarUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadAvatarUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadAvatarUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.avatarUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadAvatarUserRequest {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : "",
    };
  },

  toJSON(message: UploadAvatarUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.avatarUrl !== "") {
      obj.avatarUrl = message.avatarUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadAvatarUserRequest>, I>>(base?: I): UploadAvatarUserRequest {
    return UploadAvatarUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadAvatarUserRequest>, I>>(object: I): UploadAvatarUserRequest {
    const message = createBaseUploadAvatarUserRequest();
    message.userId = object.userId ?? 0;
    message.avatarUrl = object.avatarUrl ?? "";
    return message;
  },
};

function createBaseFindUserAvatarRequest(): FindUserAvatarRequest {
  return { userId: 0, avatarId: 0 };
}

export const FindUserAvatarRequest: MessageFns<FindUserAvatarRequest> = {
  encode(message: FindUserAvatarRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.avatarId !== 0) {
      writer.uint32(16).int32(message.avatarId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserAvatarRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserAvatarRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.avatarId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserAvatarRequest {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      avatarId: isSet(object.avatarId) ? globalThis.Number(object.avatarId) : 0,
    };
  },

  toJSON(message: FindUserAvatarRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.avatarId !== 0) {
      obj.avatarId = Math.round(message.avatarId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserAvatarRequest>, I>>(base?: I): FindUserAvatarRequest {
    return FindUserAvatarRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserAvatarRequest>, I>>(object: I): FindUserAvatarRequest {
    const message = createBaseFindUserAvatarRequest();
    message.userId = object.userId ?? 0;
    message.avatarId = object.avatarId ?? 0;
    return message;
  },
};

function createBaseFindUserAvatarArrayRequest(): FindUserAvatarArrayRequest {
  return { userId: 0 };
}

export const FindUserAvatarArrayRequest: MessageFns<FindUserAvatarArrayRequest> = {
  encode(message: FindUserAvatarArrayRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserAvatarArrayRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserAvatarArrayRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserAvatarArrayRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 };
  },

  toJSON(message: FindUserAvatarArrayRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserAvatarArrayRequest>, I>>(base?: I): FindUserAvatarArrayRequest {
    return FindUserAvatarArrayRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserAvatarArrayRequest>, I>>(object: I): FindUserAvatarArrayRequest {
    const message = createBaseFindUserAvatarArrayRequest();
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseDeleteAvatarUserRequest(): DeleteAvatarUserRequest {
  return { userId: 0, avatarId: 0 };
}

export const DeleteAvatarUserRequest: MessageFns<DeleteAvatarUserRequest> = {
  encode(message: DeleteAvatarUserRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.avatarId !== 0) {
      writer.uint32(16).int32(message.avatarId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAvatarUserRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAvatarUserRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.avatarId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAvatarUserRequest {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      avatarId: isSet(object.avatarId) ? globalThis.Number(object.avatarId) : 0,
    };
  },

  toJSON(message: DeleteAvatarUserRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.avatarId !== 0) {
      obj.avatarId = Math.round(message.avatarId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteAvatarUserRequest>, I>>(base?: I): DeleteAvatarUserRequest {
    return DeleteAvatarUserRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteAvatarUserRequest>, I>>(object: I): DeleteAvatarUserRequest {
    const message = createBaseDeleteAvatarUserRequest();
    message.userId = object.userId ?? 0;
    message.avatarId = object.avatarId ?? 0;
    return message;
  },
};

function createBaseDeleteAvatarUserResponse(): DeleteAvatarUserResponse {
  return { message: "", status: 0 };
}

export const DeleteAvatarUserResponse: MessageFns<DeleteAvatarUserResponse> = {
  encode(message: DeleteAvatarUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteAvatarUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteAvatarUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteAvatarUserResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
    };
  },

  toJSON(message: DeleteAvatarUserResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteAvatarUserResponse>, I>>(base?: I): DeleteAvatarUserResponse {
    return DeleteAvatarUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteAvatarUserResponse>, I>>(object: I): DeleteAvatarUserResponse {
    const message = createBaseDeleteAvatarUserResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseFindUserAvatarResponse(): FindUserAvatarResponse {
  return { message: "", status: 0, data: undefined };
}

export const FindUserAvatarResponse: MessageFns<FindUserAvatarResponse> = {
  encode(message: FindUserAvatarResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.data !== undefined) {
      AvatarData.encode(message.data, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserAvatarResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserAvatarResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = AvatarData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserAvatarResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      data: isSet(object.data) ? AvatarData.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: FindUserAvatarResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.data !== undefined) {
      obj.data = AvatarData.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserAvatarResponse>, I>>(base?: I): FindUserAvatarResponse {
    return FindUserAvatarResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserAvatarResponse>, I>>(object: I): FindUserAvatarResponse {
    const message = createBaseFindUserAvatarResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? 0;
    message.data = (object.data !== undefined && object.data !== null)
      ? AvatarData.fromPartial(object.data)
      : undefined;
    return message;
  },
};

function createBaseFindUserAvatarArrayResponse(): FindUserAvatarArrayResponse {
  return { message: "", status: 0, data: [] };
}

export const FindUserAvatarArrayResponse: MessageFns<FindUserAvatarArrayResponse> = {
  encode(message: FindUserAvatarArrayResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    for (const v of message.data) {
      AvatarData.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FindUserAvatarArrayResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFindUserAvatarArrayResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data.push(AvatarData.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FindUserAvatarArrayResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
      data: globalThis.Array.isArray(object?.data) ? object.data.map((e: any) => AvatarData.fromJSON(e)) : [],
    };
  },

  toJSON(message: FindUserAvatarArrayResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    if (message.data?.length) {
      obj.data = message.data.map((e) => AvatarData.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FindUserAvatarArrayResponse>, I>>(base?: I): FindUserAvatarArrayResponse {
    return FindUserAvatarArrayResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FindUserAvatarArrayResponse>, I>>(object: I): FindUserAvatarArrayResponse {
    const message = createBaseFindUserAvatarArrayResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? 0;
    message.data = object.data?.map((e) => AvatarData.fromPartial(e)) || [];
    return message;
  },
};

function createBaseUploadAvatarUserResponse(): UploadAvatarUserResponse {
  return { message: "", status: 0 };
}

export const UploadAvatarUserResponse: MessageFns<UploadAvatarUserResponse> = {
  encode(message: UploadAvatarUserResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UploadAvatarUserResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUploadAvatarUserResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UploadAvatarUserResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
    };
  },

  toJSON(message: UploadAvatarUserResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UploadAvatarUserResponse>, I>>(base?: I): UploadAvatarUserResponse {
    return UploadAvatarUserResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UploadAvatarUserResponse>, I>>(object: I): UploadAvatarUserResponse {
    const message = createBaseUploadAvatarUserResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseAvatarData(): AvatarData {
  return { avatarId: 0, avatarUrl: "" };
}

export const AvatarData: MessageFns<AvatarData> = {
  encode(message: AvatarData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.avatarId !== 0) {
      writer.uint32(8).int32(message.avatarId);
    }
    if (message.avatarUrl !== "") {
      writer.uint32(18).string(message.avatarUrl);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AvatarData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAvatarData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.avatarId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.avatarUrl = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AvatarData {
    return {
      avatarId: isSet(object.avatarId) ? globalThis.Number(object.avatarId) : 0,
      avatarUrl: isSet(object.avatarUrl) ? globalThis.String(object.avatarUrl) : "",
    };
  },

  toJSON(message: AvatarData): unknown {
    const obj: any = {};
    if (message.avatarId !== 0) {
      obj.avatarId = Math.round(message.avatarId);
    }
    if (message.avatarUrl !== "") {
      obj.avatarUrl = message.avatarUrl;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AvatarData>, I>>(base?: I): AvatarData {
    return AvatarData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AvatarData>, I>>(object: I): AvatarData {
    const message = createBaseAvatarData();
    message.avatarId = object.avatarId ?? 0;
    message.avatarUrl = object.avatarUrl ?? "";
    return message;
  },
};

export interface ContentService {
  DeleteAvatarUser(request: DeleteAvatarUserRequest): Promise<DeleteAvatarUserResponse>;
  FindUserAvatar(request: FindUserAvatarRequest): Promise<FindUserAvatarResponse>;
  FindUserAvatarArray(request: FindUserAvatarArrayRequest): Promise<FindUserAvatarArrayResponse>;
  UploadAvatarUser(request: UploadAvatarUserRequest): Promise<UploadAvatarUserResponse>;
}

export const ContentServiceServiceName = "content.ContentService";
export class ContentServiceClientImpl implements ContentService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || ContentServiceServiceName;
    this.rpc = rpc;
    this.DeleteAvatarUser = this.DeleteAvatarUser.bind(this);
    this.FindUserAvatar = this.FindUserAvatar.bind(this);
    this.FindUserAvatarArray = this.FindUserAvatarArray.bind(this);
    this.UploadAvatarUser = this.UploadAvatarUser.bind(this);
  }
  DeleteAvatarUser(request: DeleteAvatarUserRequest): Promise<DeleteAvatarUserResponse> {
    const data = DeleteAvatarUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteAvatarUser", data);
    return promise.then((data) => DeleteAvatarUserResponse.decode(new BinaryReader(data)));
  }

  FindUserAvatar(request: FindUserAvatarRequest): Promise<FindUserAvatarResponse> {
    const data = FindUserAvatarRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FindUserAvatar", data);
    return promise.then((data) => FindUserAvatarResponse.decode(new BinaryReader(data)));
  }

  FindUserAvatarArray(request: FindUserAvatarArrayRequest): Promise<FindUserAvatarArrayResponse> {
    const data = FindUserAvatarArrayRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "FindUserAvatarArray", data);
    return promise.then((data) => FindUserAvatarArrayResponse.decode(new BinaryReader(data)));
  }

  UploadAvatarUser(request: UploadAvatarUserRequest): Promise<UploadAvatarUserResponse> {
    const data = UploadAvatarUserRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "UploadAvatarUser", data);
    return promise.then((data) => UploadAvatarUserResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
