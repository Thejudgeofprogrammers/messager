// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.5
//   protoc               v3.21.12
// source: session_user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "session_user";

export interface SaveUserSessionRequest {
  userId: number;
  jwtToken: string;
}

export interface SaveUserSessionResponse {
  message: string;
}

export interface GetUserSessionRequest {
  userId: number;
}

export interface GetUserSessionResponse {
  userId: number;
  jwtToken: string;
}

export interface DeleteUserSessionRequest {
  userId: number;
  jwtToken: string;
}

export interface DeleteUserSessionResponse {
  message: string;
  status: number;
}

function createBaseSaveUserSessionRequest(): SaveUserSessionRequest {
  return { userId: 0, jwtToken: "" };
}

export const SaveUserSessionRequest: MessageFns<SaveUserSessionRequest> = {
  encode(message: SaveUserSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.jwtToken !== "") {
      writer.uint32(18).string(message.jwtToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveUserSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveUserSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.jwtToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SaveUserSessionRequest {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      jwtToken: isSet(object.jwtToken) ? globalThis.String(object.jwtToken) : "",
    };
  },

  toJSON(message: SaveUserSessionRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.jwtToken !== "") {
      obj.jwtToken = message.jwtToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SaveUserSessionRequest>, I>>(base?: I): SaveUserSessionRequest {
    return SaveUserSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SaveUserSessionRequest>, I>>(object: I): SaveUserSessionRequest {
    const message = createBaseSaveUserSessionRequest();
    message.userId = object.userId ?? 0;
    message.jwtToken = object.jwtToken ?? "";
    return message;
  },
};

function createBaseSaveUserSessionResponse(): SaveUserSessionResponse {
  return { message: "" };
}

export const SaveUserSessionResponse: MessageFns<SaveUserSessionResponse> = {
  encode(message: SaveUserSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SaveUserSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSaveUserSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SaveUserSessionResponse {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: SaveUserSessionResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SaveUserSessionResponse>, I>>(base?: I): SaveUserSessionResponse {
    return SaveUserSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SaveUserSessionResponse>, I>>(object: I): SaveUserSessionResponse {
    const message = createBaseSaveUserSessionResponse();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseGetUserSessionRequest(): GetUserSessionRequest {
  return { userId: 0 };
}

export const GetUserSessionRequest: MessageFns<GetUserSessionRequest> = {
  encode(message: GetUserSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserSessionRequest {
    return { userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0 };
  },

  toJSON(message: GetUserSessionRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserSessionRequest>, I>>(base?: I): GetUserSessionRequest {
    return GetUserSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserSessionRequest>, I>>(object: I): GetUserSessionRequest {
    const message = createBaseGetUserSessionRequest();
    message.userId = object.userId ?? 0;
    return message;
  },
};

function createBaseGetUserSessionResponse(): GetUserSessionResponse {
  return { userId: 0, jwtToken: "" };
}

export const GetUserSessionResponse: MessageFns<GetUserSessionResponse> = {
  encode(message: GetUserSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.jwtToken !== "") {
      writer.uint32(18).string(message.jwtToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetUserSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.jwtToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserSessionResponse {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      jwtToken: isSet(object.jwtToken) ? globalThis.String(object.jwtToken) : "",
    };
  },

  toJSON(message: GetUserSessionResponse): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.jwtToken !== "") {
      obj.jwtToken = message.jwtToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserSessionResponse>, I>>(base?: I): GetUserSessionResponse {
    return GetUserSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserSessionResponse>, I>>(object: I): GetUserSessionResponse {
    const message = createBaseGetUserSessionResponse();
    message.userId = object.userId ?? 0;
    message.jwtToken = object.jwtToken ?? "";
    return message;
  },
};

function createBaseDeleteUserSessionRequest(): DeleteUserSessionRequest {
  return { userId: 0, jwtToken: "" };
}

export const DeleteUserSessionRequest: MessageFns<DeleteUserSessionRequest> = {
  encode(message: DeleteUserSessionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== 0) {
      writer.uint32(8).int32(message.userId);
    }
    if (message.jwtToken !== "") {
      writer.uint32(18).string(message.jwtToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteUserSessionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteUserSessionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.userId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.jwtToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteUserSessionRequest {
    return {
      userId: isSet(object.userId) ? globalThis.Number(object.userId) : 0,
      jwtToken: isSet(object.jwtToken) ? globalThis.String(object.jwtToken) : "",
    };
  },

  toJSON(message: DeleteUserSessionRequest): unknown {
    const obj: any = {};
    if (message.userId !== 0) {
      obj.userId = Math.round(message.userId);
    }
    if (message.jwtToken !== "") {
      obj.jwtToken = message.jwtToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteUserSessionRequest>, I>>(base?: I): DeleteUserSessionRequest {
    return DeleteUserSessionRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteUserSessionRequest>, I>>(object: I): DeleteUserSessionRequest {
    const message = createBaseDeleteUserSessionRequest();
    message.userId = object.userId ?? 0;
    message.jwtToken = object.jwtToken ?? "";
    return message;
  },
};

function createBaseDeleteUserSessionResponse(): DeleteUserSessionResponse {
  return { message: "", status: 0 };
}

export const DeleteUserSessionResponse: MessageFns<DeleteUserSessionResponse> = {
  encode(message: DeleteUserSessionResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteUserSessionResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteUserSessionResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteUserSessionResponse {
    return {
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      status: isSet(object.status) ? globalThis.Number(object.status) : 0,
    };
  },

  toJSON(message: DeleteUserSessionResponse): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.status !== 0) {
      obj.status = Math.round(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteUserSessionResponse>, I>>(base?: I): DeleteUserSessionResponse {
    return DeleteUserSessionResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteUserSessionResponse>, I>>(object: I): DeleteUserSessionResponse {
    const message = createBaseDeleteUserSessionResponse();
    message.message = object.message ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

export interface SessionUserService {
  SaveUserSession(request: SaveUserSessionRequest): Promise<SaveUserSessionResponse>;
  GetUserSession(request: GetUserSessionRequest): Promise<GetUserSessionResponse>;
  DeleteUserSession(request: DeleteUserSessionRequest): Promise<DeleteUserSessionResponse>;
}

export const SessionUserServiceServiceName = "session_user.SessionUserService";
export class SessionUserServiceClientImpl implements SessionUserService {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || SessionUserServiceServiceName;
    this.rpc = rpc;
    this.SaveUserSession = this.SaveUserSession.bind(this);
    this.GetUserSession = this.GetUserSession.bind(this);
    this.DeleteUserSession = this.DeleteUserSession.bind(this);
  }
  SaveUserSession(request: SaveUserSessionRequest): Promise<SaveUserSessionResponse> {
    const data = SaveUserSessionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SaveUserSession", data);
    return promise.then((data) => SaveUserSessionResponse.decode(new BinaryReader(data)));
  }

  GetUserSession(request: GetUserSessionRequest): Promise<GetUserSessionResponse> {
    const data = GetUserSessionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GetUserSession", data);
    return promise.then((data) => GetUserSessionResponse.decode(new BinaryReader(data)));
  }

  DeleteUserSession(request: DeleteUserSessionRequest): Promise<DeleteUserSessionResponse> {
    const data = DeleteUserSessionRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "DeleteUserSession", data);
    return promise.then((data) => DeleteUserSessionResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
